name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'
  REDIS_VERSION: '7.0'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: Personalised-News-Aggregator/server/package-lock.json

    - name: Install dependencies
      working-directory: Personalised-News-Aggregator/server
      run: npm ci

    - name: Run linter
      working-directory: Personalised-News-Aggregator/server
      run: npm run lint

    - name: Run tests
      working-directory: Personalised-News-Aggregator/server
      run: npm run test:coverage
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/news-aggregator-test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        NEWSAPI_KEY: test-api-key

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: Personalised-News-Aggregator/server/coverage/lcov.info
        flags: backend
        name: backend-coverage

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: Personalised-News-Aggregator/server/package-lock.json

    - name: Install dependencies
      working-directory: Personalised-News-Aggregator/server
      run: npm ci

    - name: Build Docker image
      working-directory: Personalised-News-Aggregator/server
      run: |
        docker build -t news-aggregator:${{ github.sha }} .
        docker tag news-aggregator:${{ github.sha }} news-aggregator:latest

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 4000:4000 \
          -e NODE_ENV=test \
          -e MONGODB_URI=mongodb://localhost:27017/test \
          -e REDIS_URL=redis://localhost:6379 \
          -e JWT_SECRET=test-secret \
          news-aggregator:${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:4000/api/health || exit 1
        
        # Cleanup
        docker stop test-container

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: Personalised-News-Aggregator/server/package-lock.json

    - name: Install dependencies
      working-directory: Personalised-News-Aggregator/server
      run: npm ci

    - name: Run security audit
      working-directory: Personalised-News-Aggregator/server
      run: npm audit --audit-level=moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      working-directory: Personalised-News-Aggregator/server

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker push your-registry/news-aggregator:staging

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
        # Example: docker push your-registry/news-aggregator:latest

  notify:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        # Add notification logic here (Slack, Discord, email, etc.)

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "❌ One or more checks failed!"
        # Add notification logic here
